<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GitHub H-Index Calculator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/18.2.0/umd/react.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/18.2.0/umd/react-dom.production.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/7.22.19/babel.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <div id="app" class="p-4"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        // Serverless GitHub Auth (inline to avoid CORS issues when running locally)
        class ServerlessGitHubAuth {
            constructor() {
                // Client ID for GitHub OAuth Apps
                this.clientId = 'YOUR_GITHUB_CLIENT_ID'; // Replace with your actual GitHub Client ID
                
                // Storage keys
                this.TOKEN_KEY = 'gh_access_token';
                this.USER_KEY = 'gh_user_data';
                
                // Load existing data
                this.accessToken = localStorage.getItem(this.TOKEN_KEY) || null;
                this.userData = JSON.parse(localStorage.getItem(this.USER_KEY) || 'null');
                
                // Auth state listeners
                this.listeners = [];
            }

            // Check if user is authenticated
            isAuthenticated() {
                return !!this.accessToken;
            }

            // Get current access token
            getAccessToken() {
                return this.accessToken;
            }

            // Get user data
            getUser() {
                return this.userData;
            }

            // Start device flow authentication
            async login() {
                try {
                    // Show loading state
                    this.notifyListeners('authenticating');
                    
                    // Step 1: Request device and user verification codes
                    const deviceResponse = await fetch('https://github.com/login/device/code', {
                        method: 'POST',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            client_id: this.clientId,
                            scope: 'repo read:user'
                        })
                    });
                    
                    if (!deviceResponse.ok) {
                        throw new Error('Failed to start device flow');
                    }
                    
                    const deviceData = await deviceResponse.json();
                    const { 
                        device_code, 
                        user_code, 
                        verification_uri, 
                        expires_in, 
                        interval 
                    } = deviceData;
                    
                    // Step 2: Show the user the verification code and URL
                    this.notifyListeners('verification_needed', {
                        userCode: user_code,
                        verificationUrl: verification_uri
                    });
                    
                    // Step 3: Poll for the token
                    const pollStartTime = Date.now();
                    const expiresAt = pollStartTime + (expires_in * 1000);
                    
                    const pollForToken = async () => {
                        if (Date.now() > expiresAt) {
                            this.notifyListeners('error', { message: 'Authentication timed out' });
                            return;
                        }
                        
                        try {
                            const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {
                                method: 'POST',
                                headers: {
                                    'Accept': 'application/json',
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    client_id: this.clientId,
                                    device_code: device_code,
                                    grant_type: 'urn:ietf:params:oauth:grant-type:device_code'
                                })
                            });
                            
                            const tokenData = await tokenResponse.json();
                            
                            if (tokenData.error === 'authorization_pending') {
                                // User hasn't authorized yet, keep polling
                                setTimeout(pollForToken, interval * 1000);
                                return;
                            }
                            
                            if (tokenData.error) {
                                this.notifyListeners('error', { message: tokenData.error_description || tokenData.error });
                                return;
                            }
                            
                            if (tokenData.access_token) {
                                // Success! Save the token
                                this.accessToken = tokenData.access_token;
                                localStorage.setItem(this.TOKEN_KEY, this.accessToken);
                                
                                // Fetch user data
                                await this.fetchUserData();
                                
                                // Notify success
                                this.notifyListeners('authenticated');
                            }
                        } catch (error) {
                            setTimeout(pollForToken, interval * 1000);
                        }
                    };
                    
                    // Start polling
                    setTimeout(pollForToken, interval * 1000);
                    
                } catch (error) {
                    this.notifyListeners('error', { message: error.message });
                }
            }

            // Fetch user data with the token
            async fetchUserData() {
                if (!this.accessToken) return null;
                
                try {
                    const response = await fetch('https://api.github.com/user', {
                        headers: {
                            'Authorization': `token ${this.accessToken}`,
                            'Accept': 'application/vnd.github+json'
                        }
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to fetch user data');
                    }
                    
                    this.userData = await response.json();
                    localStorage.setItem(this.USER_KEY, JSON.stringify(this.userData));
                    return this.userData;
                } catch (error) {
                    console.error('Error fetching user data:', error);
                    return null;
                }
            }

            // Logout and clear stored data
            logout() {
                this.accessToken = null;
                this.userData = null;
                localStorage.removeItem(this.TOKEN_KEY);
                localStorage.removeItem(this.USER_KEY);
                this.notifyListeners('logged_out');
            }

            // Subscribe to auth state changes
            subscribe(callback) {
                this.listeners.push(callback);
                return () => {
                    this.listeners = this.listeners.filter(listener => listener !== callback);
                };
            }

            // Notify all listeners of state change
            notifyListeners(state, data = {}) {
                this.listeners.forEach(listener => {
                    listener(state, data);
                });
            }
        }

        // Create auth instance
        const auth = new ServerlessGitHubAuth();

        // Authentication dialog component
        const AuthDialog = ({ isOpen, authState, userCode, verificationUrl, onClose }) => {
            if (!isOpen) return null;
            
            return (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                    <div className="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
                        <h2 className="text-2xl font-bold mb-4">GitHub Authentication</h2>
                        
                        {authState === 'authenticating' && (
                            <div className="text-center py-6">
                                <div className="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mb-4"></div>
                                <p>Preparing authentication...</p>
                            </div>
                        )}
                        
                        {authState === 'verification_needed' && (
                            <div className="text-center py-4">
                                <p className="mb-4">To authenticate with GitHub:</p>
                                <ol className="text-left list-decimal pl-6 mb-6">
                                    <li className="mb-2">Go to: <a href={verificationUrl} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline font-medium">{verificationUrl}</a></li>
                                    <li className="mb-2">Enter this code:</li>
                                </ol>
                                <div className="bg-gray-100 py-3 px-4 rounded-md text-center mb-6">
                                    <span className="text-2xl font-mono tracking-wider">{userCode}</span>
                                </div>
                                <p className="text-sm text-gray-600 mb-4">Keep this window open while completing the authentication.</p>
                            </div>
                        )}
                        
                        {authState === 'error' && (
                            <div className="text-center py-6">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-red-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                <p className="text-red-600">Authentication failed. Please try again.</p>
                                <button 
                                    className="mt-4 bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
                                    onClick={onClose}
                                >
                                    Close
                                </button>
                            </div>
                        )}
                        
                        {(authState === 'authenticated' || authState === 'logged_out') && (
                            <div className="text-center py-6">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-green-500 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                </svg>
                                <p className="text-green-600 mb-4">
                                    {authState === 'authenticated' ? 'Successfully authenticated!' : 'You have been logged out.'}
                                </p>
                                <button 
                                    className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded"
                                    onClick={onClose}
                                >
                                    Close
                                </button>
                            </div>
                        )}
                    </div>
                </div>
            );
        };

        const GitHubHIndexApp = () => {
            const [searchTerm, setSearchTerm] = useState('');
            const [dateLimit, setDateLimit] = useState('2023-01-01');
            const [results, setResults] = useState(null);
            const [isLoading, setIsLoading] = useState(false);
            const [error, setError] = useState(null);

            // Auth state management
            const [isAuthenticated, setIsAuthenticated] = useState(auth.isAuthenticated());
            const [user, setUser] = useState(auth.getUser());
            const [authDialogOpen, setAuthDialogOpen] = useState(false);
            const [authState, setAuthState] = useState(null);
            const [verificationInfo, setVerificationInfo] = useState({
                userCode: '',
                verificationUrl: ''
            });

            // Initialize auth state
            useEffect(() => {
                setIsAuthenticated(auth.isAuthenticated());
                setUser(auth.getUser());
                
                const unsubscribe = auth.subscribe((state, data) => {
                    setAuthState(state);
                    
                    if (state === 'verification_needed') {
                        setVerificationInfo({
                            userCode: data.userCode,
                            verificationUrl: data.verificationUrl
                        });
                    } else if (state === 'authenticated') {
                        setIsAuthenticated(true);
                        setUser(auth.getUser());
                    } else if (state === 'logged_out') {
                        setIsAuthenticated(false);
                        setUser(null);
                    }
                });
                
                return () => unsubscribe();
            }, []);

            const handleLogin = () => {
                setAuthDialogOpen(true);
                setAuthState('authenticating');
                auth.login();
            };

            const handleLogout = () => {
                setAuthDialogOpen(true);
                auth.logout();
            };

            const closeAuthDialog = () => {
                setAuthDialogOpen(false);
                setAuthState(null);
            };

            const searchGitHub = async () => {
                if (!searchTerm) {
                    setError('Please enter a search term');
                    return;
                }

                setIsLoading(true);
                setError(null);
                
                try {
                    const perPage = 100; // Maximum allowed by GitHub API
                    
                    // Fetch and calculate the Star H-Index first (sorted by stars)
                    const starResult = await fetchAndCalculateHIndex('stargazers_count', 'stars');
                    
                    // Then fetch and calculate the Fork H-Index (sorted by forks)
                    const forkResult = await fetchAndCalculateHIndex('forks_count', 'forks');
                    
                    // Use combined repos from both fetches
                    const allRepos = [...new Map([...starResult.repos, ...forkResult.repos].map(repo => [repo.id, repo])).values()];
                    
                    // Sort for display
                    const topStarredRepos = [...allRepos].sort((a, b) => b.stargazers_count - a.stargazers_count).slice(0, 10);
                    const topForkedRepos = [...allRepos].sort((a, b) => b.forks_count - a.forks_count).slice(0, 10);
                    
                    setResults({
                        searchTerm,
                        dateLimit,
                        starHIndex: starResult.hIndex,
                        forkHIndex: forkResult.hIndex,
                        totalRepos: allRepos.length,
                        topStarredRepos,
                        topForkedRepos
                    });
                    
                    async function fetchAndCalculateHIndex(property, sortParam) {
                        let repos = [];
                        let page = 1;
                        let currentHIndex = 0;
                        let hasMoreRepos = true;
                        let reachedHIndex = false;
                        let totalItems = 0;
                        
                        while (hasMoreRepos && page <= 10 && !reachedHIndex) {
                            const query = encodeURIComponent(`${searchTerm} created:>${dateLimit}`);
                            const url = `https://api.github.com/search/repositories?q=${query}&sort=${sortParam}&order=desc&page=${page}&per_page=${perPage}`;
                            
                            const headers = {
                                'Accept': 'application/vnd.github+json'
                            };
                            
                            if (isAuthenticated) {
                                headers['Authorization'] = `token ${auth.getAccessToken()}`;
                            }
                            
                            const response = await fetch(url, { headers });
                            
                            if (!response.ok) {
                                throw new Error(`GitHub API returned ${response.status}: ${await response.text()}`);
                            }
                            
                            const data = await response.json();
                            totalItems = data.total_count;
                            
                            if (data.items && data.items.length > 0) {
                                repos = [...repos, ...data.items];
                                
                                // Check if we've reached the h-index with the current set of repos
                                const tempHIndex = calculateHIndex(repos, property);
                                
                                // If h-index hasn't increased or we've reached theoretical maximum, stop fetching
                                if (tempHIndex > currentHIndex) {
                                    currentHIndex = tempHIndex;
                                    
                                    // If the current count of repos is significantly greater than the h-index,
                                    // we've likely found the true h-index
                                    if (repos.length >= currentHIndex * 2 && repos[currentHIndex-1][property] === currentHIndex && 
                                        (repos.length === data.total_count || repos.length >= currentHIndex * 3)) {
                                        reachedHIndex = true;
                                    }
                                } else if (repos.length >= perPage * 2 && tempHIndex === currentHIndex) {
                                    // If h-index hasn't improved after fetching 200+ repositories, likely found it
                                    reachedHIndex = true;
                                }
                                
                                if (data.items.length < perPage) {
                                    hasMoreRepos = false;
                                }
                            } else {
                                hasMoreRepos = false;
                            }
                            
                            page++;
                        }
                        
                        return {
                            hIndex: currentHIndex,
                            repos,
                            totalFetched: Math.min(totalItems, repos.length)
                        };
                    }
                } catch (error) {
                    console.error('Search error:', error);
                    setError(error.message);
                } finally {
                    setIsLoading(false);
                }
            };

            const calculateHIndex = (repos, property) => {
                // Sort repositories by the given property (stars or forks) in descending order
                const sortedRepos = [...repos].sort((a, b) => b[property] - a[property]);
                
                // Find the h-index
                let hIndex = 0;
                for (let i = 0; i < sortedRepos.length; i++) {
                    if (sortedRepos[i][property] >= i + 1) {
                        hIndex = i + 1;
                    } else {
                        break;
                    }
                }
                
                return hIndex;
            };

            return (
                <div className="max-w-4xl mx-auto">
                    <h1 className="text-3xl font-bold text-center mb-8">GitHub H-Index Calculator</h1>
                    
                    <div className="bg-white p-6 rounded-lg shadow-md mb-6">
                        <div className="flex flex-col md:flex-row justify-between items-center mb-6">
                            <h2 className="text-xl font-bold mb-4 md:mb-0">Calculate Technology Popularity</h2>
                            {isAuthenticated ? (
                                <div className="flex items-center">
                                    {user && (
                                        <div className="flex items-center mr-4">
                                            <img 
                                                src={user.avatar_url} 
                                                alt={user.login} 
                                                className="w-8 h-8 rounded-full mr-2" 
                                            />
                                            <span className="text-sm font-medium">{user.login}</span>
                                        </div>
                                    )}
                                    <button
                                        onClick={handleLogout}
                                        className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded text-sm"
                                    >
                                        Logout
                                    </button>
                                </div>
                            ) : (
                                <button
                                    onClick={handleLogin}
                                    className="bg-gray-800 hover:bg-gray-900 text-white px-4 py-2 rounded flex items-center"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="white" className="mr-2">
                                        <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                                    </svg>
                                    Login with GitHub
                                </button>
                            )}
                        </div>
                        
                        <div className="mb-4">
                            <label className="block text-gray-700 mb-2" htmlFor="searchTerm">
                                Search Term
                            </label>
                            <input
                                id="searchTerm"
                                type="text"
                                className="w-full p-2 border rounded"
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                placeholder="e.g. SOAP, Python, React"
                            />
                        </div>
                        
                        <div className="mb-6">
                            <label className="block text-gray-700 mb-2" htmlFor="dateLimit">
                                Created After Date
                            </label>
                            <input
                                id="dateLimit"
                                type="date"
                                className="w-full p-2 border rounded"
                                value={dateLimit}
                                onChange={(e) => setDateLimit(e.target.value)}
                            />
                        </div>
                        
                        <button
                            className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                            onClick={searchGitHub}
                            disabled={isLoading}
                        >
                            {isLoading ? 'Searching...' : 'Calculate H-Indices'}
                        </button>
                    </div>
                    
                    {error && (
                        <div className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6" role="alert">
                            <p className="font-bold">Error</p>
                            <p>{error}</p>
                        </div>
                    )}
                    
                    {results && (
                        <div className="bg-white p-6 rounded-lg shadow-md">
                            <h2 className="text-2xl font-bold mb-4">Results for "{results.searchTerm}"</h2>
                            <p className="mb-2">Repositories created after: {results.dateLimit}</p>
                            <p className="mb-2">Total repositories analyzed: {results.totalRepos}</p>
                            
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                                <div className="bg-blue-50 p-4 rounded-lg">
                                    <h3 className="text-xl font-bold mb-3 text-blue-800">Star H-Index: {results.starHIndex}</h3>
                                    <p className="mb-4 text-sm">
                                        This means there are at least {results.starHIndex} repositories with at least {results.starHIndex} stars each.
                                    </p>
                                    <h4 className="font-bold mb-2">Top Starred Repositories:</h4>
                                    <ul className="text-sm">
                                        {results.topStarredRepos.map(repo => (
                                            <li key={repo.id} className="mb-2">
                                                <a href={repo.html_url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                                                    {repo.full_name}
                                                </a>
                                                <span className="ml-2 text-gray-600">({repo.stargazers_count} ⭐)</span>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                                
                                <div className="bg-green-50 p-4 rounded-lg">
                                    <h3 className="text-xl font-bold mb-3 text-green-800">Fork H-Index: {results.forkHIndex}</h3>
                                    <p className="mb-4 text-sm">
                                        This means there are at least {results.forkHIndex} repositories with at least {results.forkHIndex} forks each.
                                    </p>
                                    <h4 className="font-bold mb-2">Top Forked Repositories:</h4>
                                    <ul className="text-sm">
                                        {results.topForkedRepos.map(repo => (
                                            <li key={repo.id} className="mb-2">
                                                <a href={repo.html_url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                                                    {repo.full_name}
                                                </a>
                                                <span className="ml-2 text-gray-600">({repo.forks_count} 🍴)</span>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    <footer className="mt-8 text-center text-gray-500 text-sm">
                        {isAuthenticated ? (
                            <p>Using authenticated GitHub access (5,000 requests/hour limit).</p>
                        ) : (
                            <p>GitHub API has rate limits. For unauthenticated requests, the limit is 60 requests per hour. <br />
                            Login with GitHub for a 5,000 requests/hour limit.</p>
                        )}
                    </footer>
                    
                    {/* Authentication Dialog */}
                    <AuthDialog 
                        isOpen={authDialogOpen}
                        authState={authState}
                        userCode={verificationInfo.userCode}
                        verificationUrl={verificationInfo.verificationUrl}
                        onClose={closeAuthDialog}
                    />
                </div>
            );
        };

        ReactDOM.render(<GitHubHIndexApp />, document.getElementById('app'));
    </script>
</body>
</html>